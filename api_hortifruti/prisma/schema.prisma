// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Feirante {
  id                Int          @id @default(autoincrement())
  nome              String       @db.VarChar(60)
  email             String       @db.VarChar(60)
  senha             String       @db.VarChar(60)
  telefone          String       @db.VarChar(60)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt()
  mercadorias       Mercadoria[]
  fotos_mercadoria  FotoMercadoria[]
  usuario           Usuario      @relation(fields: [usuario_id], references: [id])
  usuario_id        Int
  localizacao       Localizacao[]
  @@map("feirantes")
}

model Localizacao {
  id          Int      @id @default(autoincrement())
  latitude    Float
  longitude   Float
  feirante    Feirante @relation(fields: [feirante_id], references: [id])
  feirante_id Int
  @@map("localizacao")
}

model Mercadoria {
  id                  Int                @id @default(autoincrement())
  nome                String             @db.VarChar(60)
  preco               Decimal            @db.Decimal(10, 2)
  quantidade          Decimal            @db.Decimal(10, 2)
  categoria           Categoria          @default(FRUTAS)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt()
  foto                String
  feirante            Feirante          @relation(fields: [feirante_id], references: [id])
  feirante_id         Int
  destaque            Boolean            @default(true)
  fotos               FotoMercadoria[]
  usuario       Usuario      @relation(fields: [usuario_id], references: [id])
  usuario_id    Int
  pedidos             Pedido[]
  @@map("mercadorias")
}

model FotoMercadoria {
  id           Int        @id @default(autoincrement())
  descricao    String     @db.VarChar(60)
  url          String
  mercadoria   Mercadoria @relation(fields: [mercadoria_id], references: [id])
  mercadoria_id Int
  feirante     Feirante          @relation(fields: [feirante_id], references: [id])
  feirante_id  Int
  @@map("fotos_mercadoria")
}

model Pedido {
  id             Int                @id @default(autoincrement())
  status         Status             @default(EM_PREPARACAO)
  tipo_entrega   Tipo_entrega       @default(ENTREGA)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt()
  consumidor     Consumidor         @relation(fields: [consumidor_id], references: [id])
  consumidor_id  Int
  mercadoria     Mercadoria @relation(fields: [mercadoria_id], references: [id])
  mercadoria_id  Int
  motoboy        Motoboy?           @relation(fields: [motoboy_id], references: [id])
  motoboy_id     Int?
  @@map("pedidos")
}

model Consumidor {
  id        Int      @id @default(autoincrement())
  nome      String   @db.VarChar(60)
  email     String   @db.VarChar(60)
  senha     String   @db.VarChar(60)
  telefone  String   @db.VarChar(60)
  endereco  String   @db.VarChar(60)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  pedidos   Pedido[]
  @@map("consumidores")
}


model Motoboy {
  id              Int      @id @default(autoincrement())
  nome            String   @db.VarChar(60)
  email           String   @db.VarChar(60)
  senha           String   @db.VarChar(60)
  telefone        String   @db.VarChar(60)
  veiculo         String   @db.VarChar(60)
  modelo_Veiculo  String   @db.VarChar(60)
  placa_Veiculo   String   @db.VarChar(60)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()
  pedidos         Pedido[]
  @@map("motoboys")
}

// falta criar a model veiculo

model Usuario {
  id Int              @id @default(autoincrement())
  nome                String   @db.VarChar(60)
  email               String   @db.VarChar(60)
  senha               String   @db.VarChar(60)
  nivel               Int      @default(1) // 1: Padr√£o, 2: Moderador, 3: Administrador
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  mercadorias         Mercadoria[]
  feirantes           Feirante[]
  @@map("usuarios") 
}

enum Categoria {
  FRUTAS
  LEGUMES
  VERDURAS
  TEMPEROS
}

enum Status {
  EM_ANDAMENTO
  FINALIZADO
  CANCELADO
  PENDENTE
  ENTREGUE
  EM_PREPARACAO
  EM_ROTA
  RETORNANDO
}

enum Tipo_entrega {
  RETIRADA_NO_LOCAL
  ENTREGA
  ENTREGA_PROGRAMADA
}